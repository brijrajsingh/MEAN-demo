{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Administrator user name used when provisioning virtual machines (which also becomes a system user administrator in MongoDB)"
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Administrator password used when provisioning virtual machines (which is also a password for the system administrator in MongoDB)"
            }
        },
        "storageAccountName": {
            "type": "string",
            "metadata": {
                "description": "Unique namespace for the Storage Account where the Virtual Machine's disks will be placed (this name will be used as a prefix to create one or more storage accounts as per t-shirt size)"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "West US",
            "allowedValues": [
                "West US",
                "East US",
                "East Asia",
                "Southeast Asia",
                "West Europe"
            ],
            "metadata": {
                "description": "Location where resources will be provisioned"
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "defaultValue": "demoVnet",
            "metadata": {
                "description": "The arbitrary name of the virtual network provisioned for the MongoDB, and nodejs nodes deployment"
            }
        },
        "subnetName": {
            "type": "string",
            "defaultValue": "mongodbSubnet",
            "metadata": {
                "description": "Subnet name for the virtual network that resources will be provisioned in to"
            }
        },
        "addressPrefix": {
            "type": "string",
            "defaultValue": "10.0.0.0/16",
            "metadata": {
                "description": "The network address space for the virtual network"
            }
        },
        "subnetPrefix": {
            "type": "string",
            "defaultValue": "10.0.0.0/24",
            "metadata": {
                "description": "The network address space for the virtual subnet"
            }
        },
        "nodeAddressPrefix": {
            "type": "string",
            "defaultValue": "10.0.0.1",
            "metadata": {
                "description": "The IP address prefix that will be used for constructing a static private IP address for each node in the cluster"
            }
        },
        "ubuntuOSVersion": {
            "type": "string",
            "defaultValue": "14.04.2-LTS",
            "allowedValues": [
                "12.04.2-LTS",
                "12.04.3-LTS",
                "12.04.4-LTS",
                "12.04.5-LTS",
                "12.10",
                "14.04.2-LTS",
                "14.10",
                "15.04"
            ],
            "metadata": {
                "description": "The Ubuntu version for the front end VM. This will pick a fully patched image of this given Ubuntu version. Allowed values: 12.04.2-LTS, 12.04.3-LTS, 12.04.4-LTS, 12.04.5-LTS, 12.10, 14.04.2-LTS, 14.10, 15.04."
            }
        },
        "jumpbox": {
            "type": "string",
            "defaultValue": "Enabled",
            "allowedValues": [
                "Enabled",
                "Disabled"
            ],
            "metadata": {
                "description": "The flag allowing to enable or disable provisioning of the jumpbox VM that can be used to access the MongoDB environment"
            }
        },
        "tshirtSize": {
            "type": "string",
            "defaultValue": "XSmall",
            "allowedValues": [
                "XSmall",
                "Small",
                "Medium",
                "Large",
                "XLarge",
                "XXLarge"
            ],
            "metadata": {
                "description": "T-shirt size of the MongoDB deployment"
            }
        },
        "replicaSetName": {
            "type": "string",
            "defaultValue": "rs0",
            "metadata": {
                "description": "The name of the MongoDB replica set"
            }
        },
        "replicaSetKey": {
            "type": "string",
            "defaultValue": "RSetKey",
            "metadata": {
                "description": "The shared secret key for the MongoDB replica set"
            }
        },
        "newStorageAccountName": {
            "type": "string",
            "metadata": {
                "description": "Unique storage account name. Must be between 3 and 24 characters in length and use numbers and lower-case letters only."
            }
        },
        "numberOfInstances": {
            "type": "int",
            "defaultValue": 2,
            "allowedValues": [
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10
            ],
            "metadata": {
                "description": "Number of VMs to deploy (2-10)"
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D2",
            "allowedValues": [
                "Standard_A3",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A9",
                "Standard_A10",
                "Standard_A11",
                "Standard_D1",
                "Standard_D2",
                "Standard_D3",
                "Standard_D4",
                "Standard_D11",
                "Standard_D12",
                "Standard_D13",
                "Standard_D14"
            ],
            "metadata": {
                "description": "Size of the Virtual Machine."
            }
        },
        "dnsNameforLBIP": {
            "type": "string",
            "metadata": {
                "description": "DNS name for Load Balancer IP"
            }
        }
    },
    "variables": {
        "_comment0": "/* T-shirt sizes may vary for different reasons, and some customers may want to modify these - so feel free to go ahead and define your favorite t-shirts */",
        "tshirtSizeXSmall": {
            "vmSizeMember": "Standard_D1",
            "vmSizeArbiter": "Standard_A1",
            "numberOfMembers": 1,
            "totalMemberCount": 2,
            "arbiter": "Enabled",
            "vmTemplate": "[concat(variables('templateBaseUrl'), 'member-resources-D1.json')]",
            "storageAccountCount": 1,
            "dataDiskSize": 100
        },
        "tshirtSizeSmall": {
            "vmSizeMember": "Standard_D1",
            "vmSizeArbiter": "Standard_A1",
            "numberOfMembers": 2,
            "totalMemberCount": 3,
            "arbiter": "Disabled",
            "vmTemplate": "[concat(variables('templateBaseUrl'), 'member-resources-D1.json')]",
            "storageAccountCount": 1,
            "dataDiskSize": 100
        },
        "tshirtSizeMedium": {
            "vmSizeMember": "Standard_D2",
            "vmSizeArbiter": "Standard_A1",
            "numberOfMembers": 3,
            "totalMemberCount": 4,
            "arbiter": "Enabled",
            "vmTemplate": "[concat(variables('templateBaseUrl'), 'member-resources-D2.json')]",
            "storageAccountCount": 2,
            "dataDiskSize": 250
        },
        "tshirtSizeLarge": {
            "vmSizeMember": "Standard_D2",
            "vmSizeArbiter": "Standard_A1",
            "numberOfMembers": 7,
            "totalMemberCount": 8,
            "arbiter": "Enabled",
            "vmTemplate": "[concat(variables('templateBaseUrl'), 'member-resources-D2.json')]",
            "storageAccountCount": 4,
            "dataDiskSize": 250
        },
        "tshirtSizeXLarge": {
            "vmSizeMember": "Standard_D3",
            "vmSizeArbiter": "Standard_A1",
            "numberOfMembers": 7,
            "totalMemberCount": 8,
            "arbiter": "Enabled",
            "vmTemplate": "[concat(variables('templateBaseUrl'), 'member-resources-D3.json')]",
            "storageAccountCount": 4,
            "dataDiskSize": 500
        },
        "tshirtSizeXXLarge": {
            "vmSizeMember": "Standard_D3",
            "vmSizeArbiter": "Standard_A1",
            "numberOfMembers": 15,
            "totalMemberCount": 16,
            "arbiter": "Disabled",
            "vmTemplate": "[concat(variables('templateBaseUrl'), 'member-resources-D3.json')]",
            "storageAccountCount": 8,
            "dataDiskSize": 500
        },
        "osFamilyUbuntu": {
            "osName": "ubuntu",
            "installerBaseUrl": "http://repo.mongodb.org/apt/ubuntu",
            "installerPackages": "mongodb-org",
            "imagePublisher": "Canonical",
            "imageOffer": "UbuntuServer",
            "imageSKU": "14.04.2-LTS"
        },
        "vmStorageAccountContainerName": "vhds",
        "vmStorageAccountDomain": ".blob.core.windows.net",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
        "sharedScriptUrl": "[concat('https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/', variables('osFamilySpec').osName, '/')]",
        "scriptUrl": "https://raw.githubusercontent.com/maninderjit/MEAN-demo/master/Centos-nojejs-nodes-mongodb-one-replica-set/",
        "templateBaseUrl": "[variables('scriptUrl')]",
        "jumpboxTemplateEnabled": "jumpbox-resources.json",
        "jumpboxTemplateDisabled": "empty-resources.json",
        "arbiterTemplateEnabled": "arbiter-resources.json",
        "arbiterTemplateDisabled": "empty-resources.json",
        "sharedTemplateUrl": "[concat(variables('templateBaseUrl'), 'shared-resources.json')]",
        "jumpboxTemplateUrl": "[concat(variables('templateBaseUrl'), variables(concat('jumpboxTemplate', parameters('jumpbox'))))]",
        "arbiterTemplateUrl": "[concat(variables('templateBaseUrl'), variables(concat('arbiterTemplate', variables('clusterSpec').arbiter)))]",
        "commonSettings": {
            "availabilitySetName": "mongodbAvailSet",
            "location": "[parameters('location')]"
        },
        "storageSettings": {
            "vhdStorageAccountName": "[parameters('storageAccountName')]",
            "vhdContainerName": "[variables('vmStorageAccountContainerName')]",
            "destinationVhdsContainer": "[concat('https://', parameters('storageAccountName'), variables('vmStorageAccountDomain'), '/', variables('vmStorageAccountContainerName'), '/')]",
            "storageAccountCount": "[variables('clusterSpec').storageAccountCount]"
        },
        "networkSettings": {
            "virtualNetworkName": "[parameters('virtualNetworkName')]",
            "addressPrefix": "[parameters('addressPrefix')]",
            "subnetName": "[parameters('subnetName')]",
            "subnetPrefix": "[parameters('subnetPrefix')]",
            "subnetRef": "[concat(variables('vnetID'), '/subnets/', parameters('subnetName'))]",
            "machineIpPrefix": "[parameters('nodeAddressPrefix')]",
            "vnetID": "[variables('vnetID')]"
        },
        "machineSettings": {
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]",
            "machineNamePrefix": "mongodb-",
            "ubuntuOSVersion": "[parameters('ubuntuOSVersion')]",
            "osImageReference": {
                "publisher": "[variables('osFamilySpec').imagePublisher]",
                "offer": "[variables('osFamilySpec').imageOffer]",
                "sku": "[variables('osFamilySpec').imageSKU]",
                "version": "latest"
            }
        },
        "clusterSpec": "[variables(concat('tshirtSize', parameters('tshirtSize')))]",
        "osFamily": "Ubuntu",
        "osFamilySpec": "[variables(concat('osFamily', variables('osFamily')))]",
        "installCommand": "[concat('bash mongodb-', variables('osFamilySpec').osName, '-install.sh', ' -i ', variables('osFamilySpec').installerBaseUrl, ' -b ', variables('osFamilySpec').installerPackages, ' -r ', parameters('replicaSetName'), ' -k ', parameters('replicaSetKey'), ' -u ', parameters('adminUsername'), ' -p ', parameters('adminPassword'), ' -x ', variables('networkSettings').machineIpPrefix, ' -n ', variables('clusterSpec').totalMemberCount)]",
        "vmScripts": {
            "scriptsToDownload": [
                "[concat(variables('scriptUrl'), 'mongodb-', variables('osFamilySpec').osName, '-install.sh')]",
                "[concat(variables('sharedScriptUrl'), 'vm-disk-utils-0.1.sh')]"
            ],
            "regularNodeInstallCommand": "[variables('installCommand')]",
            "lastNodeInstallCommand": "[concat(variables('installCommand'), ' -l')]",
            "arbiterNodeInstallCommand": "[concat(variables('installCommand'), ' -a')]"
        },
        "_comment1": "/* The weird list of values below helps partition VM disks across multiple storage accounts to achieve a better throughput */",
        "_comment2": "/* Feel free to modify the default allocations if you are comfortable and understand what you are doing */",
        "storageAccountForXSmall_0": "0",
        "storageAccountForXSmall_1": "0",
        "storageAccountForSmall_0": "0",
        "storageAccountForSmall_1": "0",
        "storageAccountForSmall_2": "0",
        "storageAccountForMedium_0": "0",
        "storageAccountForMedium_1": "0",
        "storageAccountForMedium_2": "0",
        "storageAccountForMedium_3": "0",
        "storageAccountForLarge_0": "0",
        "storageAccountForLarge_1": "1",
        "storageAccountForLarge_2": "2",
        "storageAccountForLarge_3": "3",
        "storageAccountForLarge_4": "0",
        "storageAccountForLarge_5": "1",
        "storageAccountForLarge_6": "2",
        "storageAccountForLarge_7": "3",
        "storageAccountForXLarge_0": "0",
        "storageAccountForXLarge_1": "1",
        "storageAccountForXLarge_2": "2",
        "storageAccountForXLarge_3": "3",
        "storageAccountForXLarge_4": "0",
        "storageAccountForXLarge_5": "1",
        "storageAccountForXLarge_6": "2",
        "storageAccountForXLarge_7": "3",
        "storageAccountForXXLarge_0": "0",
        "storageAccountForXXLarge_1": "1",
        "storageAccountForXXLarge_2": "2",
        "storageAccountForXXLarge_3": "3",
        "storageAccountForXXLarge_4": "4",
        "storageAccountForXXLarge_5": "5",
        "storageAccountForXXLarge_6": "6",
        "storageAccountForXXLarge_7": "7",
        "storageAccountForXXLarge_8": "0",
        "storageAccountForXXLarge_9": "1",
        "storageAccountForXXLarge_10": "2",
        "storageAccountForXXLarge_11": "3",
        "storageAccountForXXLarge_12": "4",
        "storageAccountForXXLarge_13": "5",
        "storageAccountForXXLarge_14": "6",
        "storageAccountForXXLarge_15": "7",
        
        "imagePublisher": "OpenLogic",
        "imageOffer": "CentOS",
        "imageSKU": "7.1",
        "customScriptFilePath": "https://raw.githubusercontent.com/maninderjit/MEAN-demo/master/Centos-nojejs-nodes-mongodb-one-replica-set/deploy.sh",
        "customScriptCommandToExecute": "bash deploy.sh",
        "publicIPAddressName": "myPublicIP",
        
         "virtualNetworkName": "[parameters('virtualNetworkName')]",
           "AddressPrefix": "[parameters('AddressPrefix')]",
        "availabilitySetName": "nodejsAvSet",
        "subnet1Name": "nodejsSubnet",
        "subnet1Prefix": "10.0.3.0/24",
        "subnet1Ref": "[concat(variables('vnetID'),'/subnets/', variables('subnet1Name'))]",
        "subnet2Name": "Subnet-2",
        "subnet2Prefix": "10.0.1.0/24",
        "subnet2Ref": "[concat(variables('vnetID'),'/subnets/', variables('subnet2Name'))]",
        "lbName": "myLB",
        "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]",
        "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/LoadBalancerFrontEnd')]",
        "lbPoolID": "[concat(variables('lbID'),'/backendAddressPools/BackendPool1')]",
        "lbProbeID": "[concat(variables('lbID'),'/probes/tcpProbe')]",
        "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
    },
    "resources": [
        {
            "name": "shared-resources",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('sharedTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "commonSettings": {
                        "value": "[variables('commonSettings')]"
                    },
                    "storageSettings": {
                        "value": "[variables('storageSettings')]"
                    },
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    }
                }
            }
        },
        {
            "name": "jumpbox-resources",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', 'shared-resources')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('jumpboxTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "commonSettings": {
                        "value": "[variables('commonSettings')]"
                    },
                    "storageSettings": {
                        "value": {
                            "vhdStorageAccountName": "[concat(variables('storageSettings').vhdStorageAccountName, '0')]",
                            "vhdContainerName": "[variables('storageSettings').vhdContainerName]",
                            "destinationVhdsContainer": "[concat('https://', variables('storageSettings').vhdStorageAccountName, '0', variables('vmStorageAccountDomain'), '/', variables('storageSettings').vhdContainerName, '/')]"
                        }
                    },
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "machineSettings": {
                        "value": "[variables('machineSettings')]"
                                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat('member-resources', copyindex())]",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', 'shared-resources')]"
            ],
            "copy": {
                "name": "memberNodesLoop",
                "count": "[variables('clusterSpec').numberOfMembers]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('clusterSpec').vmTemplate]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "commonSettings": {
                        "value": "[variables('commonSettings')]"
                    },
                    "storageSettings": {
                        "value": {
                            "vhdStorageAccountName": "[concat(variables('storageSettings').vhdStorageAccountName, variables(concat('storageAccountFor', parameters('tshirtSize'), '_', copyindex())))]",
                            "vhdContainerName": "[variables('storageSettings').vhdContainerName]",
                            "destinationVhdsContainer": "[concat('https://', variables('storageSettings').vhdStorageAccountName, variables(concat('storageAccountFor', parameters('tshirtSize'), '_', copyindex())), variables('vmStorageAccountDomain'), '/', variables('storageSettings').vhdContainerName, '/')]"
                        }
                    },
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                  
                    "machineSettings": {
                        "value": {
                            "adminUsername": "[variables('machineSettings').adminUsername]",
                            "adminPassword": "[variables('machineSettings').adminPassword]",
                            "machineNamePrefix": "[variables('machineSettings').machineNamePrefix]",
                            "osImageReference": "[variables('machineSettings').osImageReference]",
                            "vmSize": "[variables('clusterSpec').vmSizeMember]",
                            "dataDiskSize": "[variables('clusterSpec').dataDiskSize]",
                            "machineIndex": "[copyindex()]",
                            "vmScripts": "[variables('vmScripts').scriptsToDownload]",
                            "commandToExecute": "[variables('vmScripts').regularNodeInstallCommand]"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "lastmember-resources",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "memberNodesLoop"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('clusterSpec').vmTemplate]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "commonSettings": {
                        "value": "[variables('commonSettings')]"
                    },
                    "storageSettings": {
                        "value": {
                            "vhdStorageAccountName": "[concat(variables('storageSettings').vhdStorageAccountName, variables(concat('storageAccountFor', parameters('tshirtSize'), '_', variables('clusterSpec').numberOfMembers)))]",
                            "vhdContainerName": "[variables('storageSettings').vhdContainerName]",
                            "destinationVhdsContainer": "[concat('https://', variables('storageSettings').vhdStorageAccountName, variables(concat('storageAccountFor', parameters('tshirtSize'), '_', variables('clusterSpec').numberOfMembers)), variables('vmStorageAccountDomain'), '/', variables('storageSettings').vhdContainerName, '/')]"
                        }
                    },
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "machineSettings": {
                        "value": {
                            "adminUsername": "[variables('machineSettings').adminUsername]",
                            "adminPassword": "[variables('machineSettings').adminPassword]",
                            "machineNamePrefix": "[variables('machineSettings').machineNamePrefix]",
                            "osImageReference": "[variables('machineSettings').osImageReference]",
                            "vmSize": "[variables('clusterSpec').vmSizeMember]",
                            "dataDiskSize": "[variables('clusterSpec').dataDiskSize]",
                            "machineIndex": "[variables('clusterSpec').numberOfMembers]",
                            "vmScripts": "[variables('vmScripts').scriptsToDownload]",
                            "commandToExecute": "[variables('vmScripts').lastNodeInstallCommand]"
                        }
                    }
                }
            }
        },
        {
            "name": "arbiter-resources",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', 'lastmember-resources')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('arbiterTemplateUrl')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "commonSettings": {
                        "value": "[variables('commonSettings')]"
                    },
                    "storageSettings": {
                        "value": {
                            "vhdStorageAccountName": "[concat(variables('storageSettings').vhdStorageAccountName, '0')]",
                            "vhdContainerName": "[variables('storageSettings').vhdContainerName]",
                            "destinationVhdsContainer": "[concat('https://', variables('storageSettings').vhdStorageAccountName, '0', variables('vmStorageAccountDomain'), '/', variables('storageSettings').vhdContainerName, '/')]"
                        }
                    },
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "machineSettings": {
                        "value": {
                            "adminUsername": "[variables('machineSettings').adminUsername]",
                            "adminPassword": "[variables('machineSettings').adminPassword]",
                            "machineNamePrefix": "[variables('machineSettings').machineNamePrefix]",
                            "osImageReference": "[variables('machineSettings').osImageReference]",
                            "vmSize": "[variables('clusterSpec').vmSizeArbiter]",
                            "vmScripts": "[variables('vmScripts').scriptsToDownload]",
                            "commandToExecute": "[concat(variables('vmScripts').arbiterNodeInstallCommand)]"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('newStorageAccountName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "Standard_LRS"
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('availabilitySetName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {}
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnet1Name')]",
                        "properties": {
                            "addressPrefix": "[variables('subnet1Prefix')]"
                        }
                    },
                    {
                        "name": "[variables('subnet2Name')]",
                        "properties": {
                            "addressPrefix": "[variables('subnet2Prefix')]"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('dnsNameforLBIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat('nic1', copyindex())]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "nicLoop",
                "count": "[parameters('numberOfInstances')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('subnet1Ref')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(variables('lbID'), '/backendAddressPools/BackendPool1')]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(variables('lbID'),'/inboundNatRules/ssh', copyindex())]"
                                }
                            ]
                        }
                    }
                ]
            }
        },
       
        {
            "apiVersion": "2015-05-01-preview",
            "name": "[variables('lbName')]",
            "type": "Microsoft.Network/loadBalancers",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('publicIPAddressID')]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "BackendPool1"
                    }
                ],
                "inboundNatRules": [
                    {
                        "name": "ssh0",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigID')]"
                            },
                            "protocol": "tcp",
                            "frontendPort": 50000,
                            "backendPort": 22,
                            "enableFloatingIP": false
                        }
                    },
                    {
                        "name": "ssh1",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigID')]"
                            },
                            "protocol": "tcp",
                            "frontendPort": 50001,
                            "backendPort": 22,
                            "enableFloatingIP": false
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "LBRule",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigID')]"
                            },
                            "backendAddressPool": {
                                "id": "[variables('lbPoolID')]"
                            },
                            "protocol": "tcp",
                            "frontendPort": 80,
                            "backendPort": 3000,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 10,
                            "probe": {
                                "id": "[variables('lbProbeID')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "tcpProbe",
                        "properties": {
                            "protocol": "tcp",
                            "port": 3000,
                            "intervalInSeconds": "5",
                            "numberOfProbes": "2"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat('myvm', copyIndex())]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "virtualMachineLoop",
                "count": "[parameters('numberOfInstances')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', 'nic1', copyIndex())]",
                "[concat('Microsoft.Network/networkInterfaces/', 'nic2', copyIndex())]",
                "[concat('Microsoft.Storage/storageAccounts/', parameters('newStorageAccountName'))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computername": "[concat('vm', copyIndex())]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('imageSKU')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat('http://',parameters('newStorageAccountName'),'.blob.core.windows.net/vhds/','osdisk', copyIndex(), '.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "properties": {
                                "primary": true
                            },
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat('nic1', copyindex()))]"
                        },
                        {
                            "properties": {
                                "primary": false
                            },
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat('nic2', copyindex()))]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat('myvm', copyIndex(), '/extension')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "virtualMachineLoop",
                "count": "[parameters('numberOfInstances')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', 'myvm', copyIndex())]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('customScriptFilePath')]"
                    ],
                    "commandToExecute": "[concat(variables('customScriptCommandToExecute'), ' ', copyIndex(), ' ', parameters('numberOfInstances'))]"
                }
            }
        }
    ]
}